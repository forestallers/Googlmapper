{
  "name": "Googlmapper",
  "tagline": "An easy way to integrate Google Maps with Laravel",
  "body": "# An easy way to integrate Google Maps with Laravel\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/cornford/Googlmapper/version.png)](https://packagist.org/packages/cornford/googlmapper)\r\n[![Total Downloads](https://poser.pugx.org/cornford/googlmapper/d/total.png)](https://packagist.org/packages/cornford/googlmapper)\r\n[![Build Status](https://travis-ci.org/bradcornford/Googlmapper.svg?branch=master)](https://travis-ci.org/bradcornford/Googlmapper)\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/bradcornford/Googlmapper/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/bradcornford/Googlmapper/?branch=master)\r\n\r\n### For Laravel 4.x, check [version 1.0.1](https://github.com/bradcornford/Googlmapper/tree/v1.0.1)\r\n\r\nThink of Googlmapper as an easy way to integrate Google Maps with Laravel, providing a variety of helpers to speed up the utilisation of mapping. These include:\r\n\r\n- `Mapper::map`\r\n- `Mapper::location`\r\n- `Mapper::stretview`\r\n- `Mapper::marker`\r\n- `Mapper::informationWindow`\r\n- `Mapper::polyline`\r\n- `Mapper::polygon`\r\n- `Mapper::rectangle`\r\n- `Mapper::circle`\r\n- `Mapper::render`\r\n\r\n## Installation\r\n\r\nBegin by installing this package through Composer. Edit your project's `composer.json` file to require `cornford/googlmapper`.\r\n\r\n\t\"require\": {\r\n\t\t\"cornford/googlmapper\": \"2.*\"\r\n\t}\r\n\r\nNext, update Composer from the Terminal:\r\n\r\n\tcomposer update\r\n\r\nOnce this operation completes, the next step is to add the service provider. Open `app/config/app.php`, and add a new item to the providers array.\r\n\r\n\t'Cornford\\Googlmapper\\MapperServiceProvider',\r\n\r\nThe next step is to introduce the facade. Open `app/config/app.php`, and add a new item to the aliases array.\r\n\r\n\t'Mapper'         => 'Cornford\\Googlmapper\\Facades\\MapperFacade',\r\n\r\nFinally we need to introduce the configuration files into your application.\r\n\r\n\tphp artisan vendor:publish --provider=\"Cornford\\\\Googlmapper\\\\MapperServiceProvider\"\r\n\r\nYou also need to set your Google API Key into the `GOOGLE_API_KEY` environment variable. To obtain an API key for your project, visit the [Google developers console](https://console.developers.google.com/).\r\n\r\nThat's it! You're all set to go.\r\n\r\n## Configuration\r\n\r\nYou can now configure Googlmapper in a few simple steps. Open `app/config/packages/cornford/googlmapper/config.php` and update the options as needed.\r\n\r\n- `enabled` - Enable Google Maps.\r\n- `key` - A Google Maps API key.\r\n- `region` - A region Google Maps should utilise, required in ISO 3166-1 code format, e.g. GB.\r\n- `language` - A language Google Maps should utilise, required in ISO 639-1 code format, e.g. en-gb.\r\n- `user` - Use custom Google Maps for users logged into the Google service, e.g. false.\r\n- `marker` - Automatically add Google Maps marker for your maps initial location, e.g. true.\r\n- `center` - Automatically center Google Maps around the initial location, when false, Google Maps will automatically center the map, e.g. true.\r\n- `zoom` - Set the default zoom level for Google Maps, e.g. 8.\r\n- `scrollWheelZoom` - Set the default scroll wheel zoom Google Maps, e.g. true.\r\n- `type` - Set the default map type for Google Maps, e.g. ROADMAP, SATELLITE, HYBRID, TERRAIN.\r\n- `ui` - Show the Google Maps default UI options, e.g. true.\r\n- `markers.icon` - Set the default marker icon, e.g. img/icon.png.\r\n- `markers.animation` - Set the default marker animation, e.g. NONE, DROP, BOUNCE.\r\n- `cluster` - Set if map marker clusters should be used.\r\n- `clusters.icon` - Display custom images for clusters using icon path.\r\n- `clusters.grid` - The grid size of a cluster in pixels.\r\n- `clusters.zoom` - The maximum zoom level that a marker can be part of a cluster.\r\n- `clusters.center` - Whether the center of each cluster should be the average of all markers in the cluster.\r\n- `clusters.size` - The minimum number of markers to be in a cluster before the markers are hidden and a count is shown.\r\n\r\n## Usage\r\n\r\nIt's really as simple as using the Mapper class in any Controller / Model / File you see fit with:\r\n\r\n`Mapper::`\r\n\r\nThis will give you access to\r\n\r\n- [Map](#map)\r\n- [Location](#location)\r\n- [Streetview](#streetview)\r\n- [Marker](#marker)\r\n- [Information Window](#information-window)\r\n- [Polyline](#polyline)\r\n- [Polygon](#polygon)\r\n- [Rectangle](#rectangle)\r\n- [Circle](#circle)\r\n- [Render](#render)\r\n\r\n### Map\r\n\r\nThe `map` method allows a map to be created, with latitude, longitude and optional parameters for options.\r\n\r\n\tMapper::map(53.381128999999990000, -1.470085000000040000);\r\n\tMapper::map(53.381128999999990000, -1.470085000000040000, ['zoom' => 15, 'center' => false, 'marker' => false, 'type' => 'HYBRID', 'overlay' => 'TRAFFIC']);\r\n\tMapper::map(53.381128999999990000, -1.470085000000040000, ['zoom' => 10, 'markers' => ['title' => 'My Location', 'animation' => 'DROP']]);\r\n\tMapper::map(53.381128999999990000, -1.470085000000040000, ['zoom' => 10, 'markers' => ['title' => 'My Location', 'animation' => 'DROP'], 'cluster' => false]);\r\n\tMapper::map(53.381128999999990000, -1.470085000000040000, ['zoom' => 10, 'markers' => ['title' => 'My Location', 'animation' => 'DROP'], 'clusters' => ['size' => 10, 'center' => true, 'zoom' => 20]]);\r\n\r\n##### Map Events\r\n\r\n**Before Load**\r\n\r\nThis event is fired before the map is loaded.\r\n\r\n\tMapper::map(53.381128999999990000, -1.470085000000040000, ['eventBeforeLoad' => 'console.log(\"before load\");']);\r\n\r\n**After Load**\r\n\r\nThis event is fired after the map is loaded.\r\n\r\n\tMapper::map(53.381128999999990000, -1.470085000000040000, ['eventAfterLoad' => 'console.log(\"after load\");']);\r\n\r\n##### Map Events\r\n\r\n**Before Load**\r\n\r\nThis event is fired before the map is loaded.\r\n\r\n\tMapper::map(53.381128999999990000, -1.470085000000040000, ['eventBeforeLoad' => 'console.log(\"before load\");']);\r\n\r\n**After Load**\r\n\r\nThis event is fired after the map is loaded.\r\n\r\n\tMapper::map(53.381128999999990000, -1.470085000000040000, ['eventAfterLoad' => 'console.log(\"after load\");']);\r\n\r\n### Location\r\n\r\nThe `location` method allows a location to be searched for with a string, returning a Location object with its latitude and longitude.\r\n\r\n\tMapper::location('Sheffield');\r\n\tMapper::location('Sheffield')->map(['zoom' => 15, 'center' => false, 'marker' => false, 'type' => 'HYBRID', 'overlay' => 'TRAFFIC']);\r\n\tMapper::location('Sheffield')->streetview(1, 1, ['ui' => false]);\r\n\r\n### Streetview\r\n\r\nThe `streetview` method allows a streetview map to be created, with latitude, longitude, heading, pitch and optional parameters for options.\r\n\r\n\tMapper::streetview(53.381128999999990000, -1.470085000000040000, 1, 1);\r\n\tMapper::streetview(53.381128999999990000, -1.470085000000040000, 1, 1, ['ui' => false]);\r\n\r\n### Marker\r\n\r\nThe `marker` method allows a marker to be added to a map, with latitude, longitude, and optional parameters for options.\r\n\r\n\tMapper::marker(53.381128999999990000, -1.470085000000040000);\r\n\tMapper::marker(53.381128999999990000, -1.470085000000040000, ['symbol' => 'circle', 'scale' => 1000]);\r\n\tMapper::map(52.381128999999990000, 0.470085000000040000)->marker(53.381128999999990000, -1.470085000000040000, ['markers' => ['symbol' => 'circle', 'scale' => 1000, 'animation' => 'DROP']]);\r\n\r\n#### Draggable Markers\r\n\r\nIf you need draggable marker, you can add option draggable. \r\n\r\n\tMapper::marker(53.381128999999990000, -1.470085000000040000, ['draggable' => true]);\r\n\r\n##### Draggable Events\r\n\r\n**Click**\r\n\r\nThis event is fired when the marker icon was clicked.\r\n\r\n\tMapper::marker(53.381128999999990000, -1.470085000000040000, ['draggable' => true, 'eventClick' => 'console.log(\"left click\");']);\r\n\r\n**Right Click**\r\n\r\nThis event is fired for a right click on the marker.\r\n\r\n\tMapper::marker(53.381128999999990000, -1.470085000000040000, ['draggable' => true, 'eventRightClick' => 'console.log(\"right click\");']);\r\n\r\n**Mouse Over**\r\n\r\nThis event is fired when the mouse enters the area of the marker icon.\r\n\r\n\tMapper::marker(53.381128999999990000, -1.470085000000040000, ['draggable' => true, 'eventMouseOver' => 'console.log(\"mouse over\");']);\r\n\r\n**Mouse Down**\r\n\r\nThis event is fired for a mouse down on the marker.\r\n\r\n\tMapper::marker(53.381128999999990000, -1.470085000000040000, ['draggable' => true, 'eventMouseDown' => 'console.log(\"mouse down\");']);\r\n\r\n**Mouse Up**\r\n\r\nThis event is fired for a mouse up on the marker.\r\n\r\n\tMapper::marker(53.381128999999990000, -1.470085000000040000, ['draggable' => true, 'eventMouseUp' => 'console.log(\"mouse up\");']);\r\n\r\n**Mouse Out**\r\n\r\nThis event is fired when the mouse leaves the area of the marker icon.\r\n\r\n\tMapper::marker(53.381128999999990000, -1.470085000000040000, ['draggable' => true, 'eventMouseOut' => 'console.log(\"mouse out\");']);\r\n\r\n**Drag**\r\n\r\nThis event is repeatedly fired while the user drags the marker.\r\n\r\n\tMapper::marker(53.381128999999990000, -1.470085000000040000, ['draggable' => true, 'eventDrag' => 'console.log(\"dragging\");']);\r\n\r\n**Drag Start**\r\n\r\nThis event is fired when the user starts dragging the marker.\r\n\r\n\tMapper::marker(53.381128999999990000, -1.470085000000040000, ['draggable' => true, 'eventDragStart' => 'console.log(\"drag start\");']);\r\n\r\n**Drag End**\r\n\r\nThis event is fired when the user stops dragging the marker.\r\n\r\n\tMapper::marker(53.381128999999990000, -1.470085000000040000, ['draggable' => true, 'eventDragEnd' => 'console.log(\"drag end\");']);\r\n\r\n### Information Window\r\n\r\nThe `informationWindow` method allows an information window to be added to to a map, with latitude, longitude, content, and optional parameters for options.\r\n\r\n\tMapper::informationWindow(53.381128999999990000, -1.470085000000040000, 'Content');\r\n\tMapper::informationWindow(53.381128999999990000, -1.470085000000040000, 'Content', ['markers' => ['title' => 'Title']]);\r\n\tMapper::map(52.381128999999990000, 0.470085000000040000)->informationWindow(53.381128999999990000, -1.470085000000040000, 'Content', ['markers' => ['animation' => 'DROP']]);\r\n\r\n### Polyline\r\n\r\nThe `polyline` method allows a polyline to be added to a map, with coordinates, and optional parameters for options.\r\n\r\n\tMapper::polyline([['latitude' => 53.381128999999990000, 'longitude' => -1.470085000000040000], ['latitude' => 52.381128999999990000, 'longitude' => 0.470085000000040000]]);\r\n\tMapper::polyline([['latitude' => 53.381128999999990000, 'longitude' => -1.470085000000040000], ['latitude' => 52.381128999999990000, 'longitude' => 0.470085000000040000]], ['editable' => 'true']);\r\n\tMapper::map(52.381128999999990000, 0.470085000000040000)->polyline([['latitude' => 53.381128999999990000, 'longitude' => -1.470085000000040000], ['latitude' => 52.381128999999990000, 'longitude' => 0.470085000000040000]], ['strokeColor' => '#000000', 'strokeOpacity' => 0.1, 'strokeWeight' => 2]);\r\n\r\n### Polygon\r\n\r\nThe `polygon` method allows a polygon to be added to a map, with coordinates, and optional parameters for options.\r\n\r\n\tMapper::polygon([['latitude' => 53.381128999999990000, 'longitude' => -1.470085000000040000], ['latitude' => 52.381128999999990000, 'longitude' => 0.470085000000040000]]);\r\n\tMapper::polygon([['latitude' => 53.381128999999990000, 'longitude' => -1.470085000000040000], ['latitude' => 52.381128999999990000, 'longitude' => 0.470085000000040000]], ['editable' => 'true']);\r\n\tMapper::map(52.381128999999990000, 0.470085000000040000)->polygon([['latitude' => 53.381128999999990000, 'longitude' => -1.470085000000040000], ['latitude' => 52.381128999999990000, 'longitude' => 0.470085000000040000]], ['strokeColor' => '#000000', 'strokeOpacity' => 0.1, 'strokeWeight' => 2, 'fillColor' => '#FFFFFF']);\r\n\r\n### Rectangle\r\n\r\nThe `rectangle` method allows a rectangle to be added to a map, with coordinates, and optional parameters for options.\r\n\r\n\tMapper::rectangle([['latitude' => 53.381128999999990000, 'longitude' => -1.470085000000040000], ['latitude' => 52.381128999999990000, 'longitude' => 0.470085000000040000]]);\r\n\tMapper::rectangle([['latitude' => 53.381128999999990000, 'longitude' => -1.470085000000040000], ['latitude' => 52.381128999999990000, 'longitude' => 0.470085000000040000]], ['editable' => 'true']);\r\n\tMapper::map(52.381128999999990000, 0.470085000000040000)->rectangle([['latitude' => 53.381128999999990000, 'longitude' => -1.470085000000040000], ['latitude' => 52.381128999999990000, 'longitude' => 0.470085000000040000]], ['strokeColor' => '#000000', 'strokeOpacity' => 0.1, 'strokeWeight' => 2, 'fillColor' => '#FFFFFF']);\r\n\r\n### Circle\r\n\r\nThe `circle` method allows a circle to be added to a map, with coordinates, and optional parameters for options.\r\n\r\n\tMapper::circle([['latitude' => 53.381128999999990000, 'longitude' => -1.470085000000040000]]);\r\n\tMapper::circle([['latitude' => 53.381128999999990000, 'longitude' => -1.470085000000040000]], ['editable' => 'true']);\r\n\tMapper::map(52.381128999999990000, 0.470085000000040000)->circle([['latitude' => 53.381128999999990000, 'longitude' => -1.470085000000040000]], ['strokeColor' => '#000000', 'strokeOpacity' => 0.1, 'strokeWeight' => 2, 'fillColor' => '#FFFFFF', 'radius' => 1000]);\r\n\r\n### Render\r\n\r\nThe `render` method allows all maps to be rendered to the page, this method can be included in Views or added as controller passed parameter, and optional parameter for item.\r\n\r\n\tMapper::render();\r\n\tMapper::render(0);\r\n\r\n### License\r\n\r\nGooglmapper is open-sourced software licensed under the [MIT license](http://opensource.org/licenses/MIT)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}